static const char *RcsId     = "$Header: /users/chaize/newsvn/cvsroot/Instrumentation/CCD/ImgGrabber/Device/src/ImgGrabberClass.cpp,v 1.2 2010-09-14 14:49:20 vince_soleil Exp $";
static const char *TagName   = "$Name: not supported by cvs2svn $";
static const char *HttpServer= "http://www.esrf.fr/computing/cs/tango/tango_doc/ds_doc/";
//+=============================================================================
//
// file :        ImgGrabberClass.cpp
//
// description : C++ source for the ImgGrabberClass. A singleton
//               class derived from DeviceClass. It implements the
//               command list and all properties and methods required
//               by the ImgGrabber once per process.
//
// project :     TANGO Device Server
//
// $Author: vince_soleil $
//
// $Revision: 1.2 $
//
// $Log: not supported by cvs2svn $
// Revision 1.1.2.3  2010/04/20 11:28:43  vince_soleil
// replaced by version from HEAD
//
// Revision 1.5  2008/03/05 13:31:57  julien_malik
// - add 'SaveSettings' command
// - support external trigger for Basler cameras
//
// Revision 1.4  2007/10/31 13:33:03  julien_malik
// - update movie part
// - OpenCV & ISL as shared libs
//
// Revision 1.3  2007/10/23 16:29:28  julien_malik
// rework the movie saving
//
// Revision 1.2  2007/10/09 14:46:42  julien_malik
// - support new plugin system
// - add AutoStart property
// - Add properties for the BaslerGrabber to save the desired init value of exposure time, frame rate, gain and black level
//
// Revision 1.1  2007/08/20 15:03:21  stephle
// initial import
//
//
// copyleft :   European Synchrotron Radiation Facility
//              BP 220, Grenoble 38043
//              FRANCE
//
//-=============================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================


#include <ImgGrabber.h>
#include <ImgGrabberClass.h>


//+----------------------------------------------------------------------------
/**
 *	Create ImgGrabberClass singleton and return it in a C function for Python usage
 */
//+----------------------------------------------------------------------------
extern "C" {
#ifdef WIN32

__declspec(dllexport)

#endif

	Tango::DeviceClass *_create_ImgGrabber_class(const char *name) {
		return ImgGrabber_ns::ImgGrabberClass::init(name);
	}
}


namespace ImgGrabber_ns
{
//+----------------------------------------------------------------------------
//
// method : 		SaveSettingsClass::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *SaveSettingsClass::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "SaveSettingsClass::execute(): arrived" << endl;

	((static_cast<ImgGrabber *>(device))->save_settings());
	return new CORBA::Any();
}

//+----------------------------------------------------------------------------
//
// method : 		GetPluginInfoCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *GetPluginInfoCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "GetPluginInfoCmd::execute(): arrived" << endl;

	return insert((static_cast<ImgGrabber *>(device))->get_plugin_info());
}


//+----------------------------------------------------------------------------
//
// method : 		OpenClass::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *OpenClass::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "OpenClass::execute(): arrived" << endl;

	((static_cast<ImgGrabber *>(device))->open());
	return new CORBA::Any();
}

//+----------------------------------------------------------------------------
//
// method : 		CloseClass::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *CloseClass::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "CloseClass::execute(): arrived" << endl;

	((static_cast<ImgGrabber *>(device))->close());
	return new CORBA::Any();
}

//+----------------------------------------------------------------------------
//
// method : 		StartClass::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *StartClass::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "StartClass::execute(): arrived" << endl;

	((static_cast<ImgGrabber *>(device))->start());
	return new CORBA::Any();
}

//+----------------------------------------------------------------------------
//
// method : 		StopClass::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *StopClass::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "StopClass::execute(): arrived" << endl;

	((static_cast<ImgGrabber *>(device))->stop());
	return new CORBA::Any();
}

//+----------------------------------------------------------------------------
//
// method : 		StartSaveMovieCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *StartSaveMovieCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "StartSaveMovieCmd::execute(): arrived" << endl;

	const Tango::DevVarDoubleStringArray	*argin;
	extract(in_any, argin);

	((static_cast<ImgGrabber *>(device))->start_save_movie(argin));
	return new CORBA::Any();
}

//+----------------------------------------------------------------------------
//
// method : 		StopSaveMovieCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *StopSaveMovieCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "StopSaveMovieCmd::execute(): arrived" << endl;

	((static_cast<ImgGrabber *>(device))->stop_save_movie());
	return new CORBA::Any();
}

//+----------------------------------------------------------------------------
//
// method : 		SnapCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *SnapCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "SnapCmd::execute(): arrived" << endl;

	((static_cast<ImgGrabber *>(device))->snap());
	return new CORBA::Any();
}

//+----------------------------------------------------------------------------
//
// method : 		SetROICmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *SetROICmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "SetROICmd::execute(): arrived" << endl;

	const Tango::DevVarLongArray	*argin;
	extract(in_any, argin);

	((static_cast<ImgGrabber *>(device))->set_roi(argin));
	return new CORBA::Any();
}

//+----------------------------------------------------------------------------
//
// method : 		GetROICmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *GetROICmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "GetROICmd::execute(): arrived" << endl;

	return insert((static_cast<ImgGrabber *>(device))->get_roi());
}

//+----------------------------------------------------------------------------
//
// method : 		ResetROICmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *ResetROICmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "ResetROICmd::execute(): arrived" << endl;

	((static_cast<ImgGrabber *>(device))->reset_roi());
	return new CORBA::Any();
}


//
//----------------------------------------------------------------
//	Initialize pointer for singleton pattern
//----------------------------------------------------------------
//
ImgGrabberClass *ImgGrabberClass::_instance = NULL;

//+----------------------------------------------------------------------------
//
// method : 		ImgGrabberClass::ImgGrabberClass(string &s)
// 
// description : 	constructor for the ImgGrabberClass
//
// in : - s : The class name
//
//-----------------------------------------------------------------------------
ImgGrabberClass::ImgGrabberClass(string &s):DeviceClass(s)
{

	cout2 << "Entering ImgGrabberClass constructor" << endl;
	set_default_property();
	get_class_property();
	write_class_property();
	
	cout2 << "Leaving ImgGrabberClass constructor" << endl;

}
//+----------------------------------------------------------------------------
//
// method : 		ImgGrabberClass::~ImgGrabberClass()
// 
// description : 	destructor for the ImgGrabberClass
//
//-----------------------------------------------------------------------------
ImgGrabberClass::~ImgGrabberClass()
{
	_instance = NULL;
}

//+----------------------------------------------------------------------------
//
// method : 		ImgGrabberClass::instance
// 
// description : 	Create the object if not already done. Otherwise, just
//			return a pointer to the object
//
// in : - name : The class name
//
//-----------------------------------------------------------------------------
ImgGrabberClass *ImgGrabberClass::init(const char *name)
{
	if (_instance == NULL)
	{
		try
		{
			string s(name);
			_instance = new ImgGrabberClass(s);
		}
		catch (bad_alloc)
		{
			throw;
		}		
	}		
	return _instance;
}

ImgGrabberClass *ImgGrabberClass::instance()
{
	if (_instance == NULL)
	{
		cerr << "Class is not initialised !!" << endl;
		exit(-1);
	}
	return _instance;
}

//+----------------------------------------------------------------------------
//
// method : 		ImgGrabberClass::command_factory
// 
// description : 	Create the command object(s) and store them in the 
//			command list
//
//-----------------------------------------------------------------------------
void ImgGrabberClass::command_factory()
{
	command_list.push_back(new OpenClass("Open",
		Tango::DEV_VOID, Tango::DEV_VOID,
		"",
		"",
		Tango::OPERATOR));
	command_list.push_back(new CloseClass("Close",
		Tango::DEV_VOID, Tango::DEV_VOID,
		"",
		"",
		Tango::OPERATOR));
	command_list.push_back(new StartClass("Start",
		Tango::DEV_VOID, Tango::DEV_VOID,
		"",
		"",
		Tango::OPERATOR));
	command_list.push_back(new StopClass("Stop",
		Tango::DEV_VOID, Tango::DEV_VOID,
		"",
		"",
		Tango::OPERATOR));
	command_list.push_back(new StartSaveMovieCmd("StartSaveMovie",
		Tango::DEVVAR_DOUBLESTRINGARRAY, Tango::DEV_VOID,
		"duration of the movie & file base-name",
		"",
		Tango::OPERATOR));
	command_list.push_back(new StopSaveMovieCmd("StopSaveMovie",
		Tango::DEV_VOID, Tango::DEV_VOID,
		"",
		"",
		Tango::OPERATOR));
	command_list.push_back(new SnapCmd("Snap",
		Tango::DEV_VOID, Tango::DEV_VOID,
		"",
		"",
		Tango::OPERATOR));
	command_list.push_back(new SetROICmd("SetROI",
		Tango::DEVVAR_LONGARRAY, Tango::DEV_VOID,
		"[origin_x, origin_y, width, height]",
		"",
		Tango::OPERATOR));
	command_list.push_back(new GetROICmd("GetROI",
		Tango::DEV_VOID, Tango::DEVVAR_LONGARRAY,
		"",
		"[origin_x, origin_y, width, height]",
		Tango::OPERATOR));
	command_list.push_back(new ResetROICmd("ResetROI",
		Tango::DEV_VOID, Tango::DEV_VOID,
		"",
		"",
		Tango::OPERATOR));
	command_list.push_back(new SaveSettingsClass("SaveSettings",
		Tango::DEV_VOID, Tango::DEV_VOID,
		"",
		"",
		Tango::OPERATOR));
	command_list.push_back(new GetPluginInfoCmd("GetPluginInfo",
		Tango::DEV_VOID, Tango::DEV_STRING,
		"",
		"",
		Tango::OPERATOR));

	//	add polling if any
	for (unsigned int i=0 ; i<command_list.size(); i++)
	{
	}
}

//+----------------------------------------------------------------------------
//
// method : 		ImgGrabberClass::get_class_property
// 
// description : 	Get the class property for specified name.
//
// in :		string	name : The property name
//
//+----------------------------------------------------------------------------
Tango::DbDatum ImgGrabberClass::get_class_property(string &prop_name)
{
	for (unsigned int i=0 ; i<cl_prop.size() ; i++)
		if (cl_prop[i].name == prop_name)
			return cl_prop[i];
	//	if not found, return  an empty DbDatum
	return Tango::DbDatum(prop_name);
}
//+----------------------------------------------------------------------------
//
// method : 		ImgGrabberClass::get_default_device_property()
// 
// description : 	Return the default value for device property.
//
//-----------------------------------------------------------------------------
Tango::DbDatum ImgGrabberClass::get_default_device_property(string &prop_name)
{
	for (unsigned int i=0 ; i<dev_def_prop.size() ; i++)
		if (dev_def_prop[i].name == prop_name)
			return dev_def_prop[i];
	//	if not found, return  an empty DbDatum
	return Tango::DbDatum(prop_name);
}

//+----------------------------------------------------------------------------
//
// method : 		ImgGrabberClass::get_default_class_property()
// 
// description : 	Return the default value for class property.
//
//-----------------------------------------------------------------------------
Tango::DbDatum ImgGrabberClass::get_default_class_property(string &prop_name)
{
	for (unsigned int i=0 ; i<cl_def_prop.size() ; i++)
		if (cl_def_prop[i].name == prop_name)
			return cl_def_prop[i];
	//	if not found, return  an empty DbDatum
	return Tango::DbDatum(prop_name);
}
//+----------------------------------------------------------------------------
//
// method : 		ImgGrabberClass::device_factory
// 
// description : 	Create the device object(s) and store them in the 
//			device list
//
// in :		Tango::DevVarStringArray *devlist_ptr : The device name list
//
//-----------------------------------------------------------------------------
void ImgGrabberClass::device_factory(const Tango::DevVarStringArray *devlist_ptr)
{

	//	Create all devices.(Automatic code generation)
	//-------------------------------------------------------------
	for (unsigned long i=0 ; i < devlist_ptr->length() ; i++)
	{
		cout4 << "Device name : " << (*devlist_ptr)[i].in() << endl;
						
		// Create devices and add it into the device list
		//----------------------------------------------------
		device_list.push_back(new ImgGrabber(this, (*devlist_ptr)[i]));							 

		// Export device to the outside world
		// Check before if database used.
		//---------------------------------------------
		if ((Tango::Util::_UseDb == true) && (Tango::Util::_FileDb == false))
			export_device(device_list.back());
		else
			export_device(device_list.back(), (*devlist_ptr)[i]);
	}
	//	End of Automatic code generation
	//-------------------------------------------------------------

}
//+----------------------------------------------------------------------------
//	Method: ImgGrabberClass::attribute_factory(vector<Tango::Attr *> &att_list)
//-----------------------------------------------------------------------------
void ImgGrabberClass::attribute_factory(vector<Tango::Attr *> &att_list)
{
	//	Attribute : CurrentlySavingMovie
	CurrentlySavingMovieAttrib	*currently_saving_movie = new CurrentlySavingMovieAttrib();
	Tango::UserDefaultAttrProp	currently_saving_movie_prop;
	currently_saving_movie_prop.set_label("Currently Saving Movie");
	currently_saving_movie_prop.set_unit(" ");
	currently_saving_movie_prop.set_description("true if a movie is been saved");
	currently_saving_movie->set_default_properties(currently_saving_movie_prop);
	att_list.push_back(currently_saving_movie);

	//	Attribute : MovieRemainingTime
	MovieRemainingTimeAttrib	*movie_remaining_time = new MovieRemainingTimeAttrib();
	Tango::UserDefaultAttrProp	movie_remaining_time_prop;
	movie_remaining_time_prop.set_label("Movie Remaining Time");
	movie_remaining_time_prop.set_unit(" ");
	movie_remaining_time_prop.set_description("The time remaining until the end of the movie currently beeing saved");
	movie_remaining_time->set_default_properties(movie_remaining_time_prop);
	att_list.push_back(movie_remaining_time);

	//	Attribute : Image
	ImageAttrib	*image = new ImageAttrib();
	Tango::UserDefaultAttrProp	image_prop;
	image_prop.set_label("Image");
	image_prop.set_unit(" ");
	image_prop.set_description("the acquired image");
	image->set_default_properties(image_prop);
	att_list.push_back(image);

	//	End of Automatic code generation
	//-------------------------------------------------------------
}

//+----------------------------------------------------------------------------
//
// method : 		ImgGrabberClass::get_class_property()
// 
// description : 	Read the class properties from database.
//
//-----------------------------------------------------------------------------
void ImgGrabberClass::get_class_property()
{
	//	Initialize your default values here (if not done with  POGO).
	//------------------------------------------------------------------

	//	Read class properties from database.(Automatic code generation)
	//------------------------------------------------------------------

	//	Call database and extract values
	//--------------------------------------------
	if (Tango::Util::instance()->_UseDb==true)
		get_db_class()->get_property(cl_prop);
	Tango::DbDatum	def_prop;
	int	i = -1;


	//	End of Automatic code generation
	//------------------------------------------------------------------

}

//+----------------------------------------------------------------------------
//
// method : 	ImgGrabberClass::set_default_property
// 
// description: Set default property (class and device) for wizard.
//              For each property, add to wizard property name and description
//              If default value has been set, add it to wizard property and
//              store it in a DbDatum.
//
//-----------------------------------------------------------------------------
void ImgGrabberClass::set_default_property()
{
	string	prop_name;
	string	prop_desc;
	string	prop_def;

	vector<string>	vect_data;
	//	Set Default Class Properties
	//	Set Default Device Properties
	prop_name = "PluginLocation";
	prop_desc = "the full path to the ImgGrabber plugin";
	prop_def  = "undefined";
	vect_data.clear();
	vect_data.push_back("undefined");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);

	prop_name = "MoviePath";
	prop_desc = "the path where the movie/images are recorded";
	prop_def  = "";
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);

	prop_name = "MovieFormat";
	prop_desc = "the format of the saved files : JPG, PNG, TIF, PGM, BMP, DIB, RAS";
	prop_def  = "AVI";
	vect_data.clear();
	vect_data.push_back("AVI");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);

	prop_name = "AutoStart";
	prop_desc = "automatically start grabbing at init";
	prop_def  = "";
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);

}
//+----------------------------------------------------------------------------
//
// method : 		ImgGrabberClass::write_class_property
// 
// description : 	Set class description as property in database
//
//-----------------------------------------------------------------------------
void ImgGrabberClass::write_class_property()
{
	//	First time, check if database used
	//--------------------------------------------
	if (Tango::Util::_UseDb == false)
		return;

	Tango::DbData	data;
	string	classname = get_name();
	string	header;
	string::size_type	start, end;

	//	Put title
	Tango::DbDatum	title("ProjectTitle");
	string	str_title("ImgGrabber");
	title << str_title;
	data.push_back(title);

	//	Put Description
	Tango::DbDatum	description("Description");
	vector<string>	str_desc;
	str_desc.push_back("  ");
	description << str_desc;
	data.push_back(description);
		
	//	put cvs location
	string	rcsId(RcsId);
	string	filename(classname);
	start = rcsId.find("/");
	if (start!=string::npos)
	{
		filename += "Class.cpp";
		end   = rcsId.find(filename);
		if (end>start)
		{
			string	strloc = rcsId.substr(start, end-start);
			//	Check if specific repository
			start = strloc.find("/cvsroot/");
			if (start!=string::npos && start>0)
			{
				string	repository = strloc.substr(0, start);
				if (repository.find("/segfs/")!=string::npos)
					strloc = "ESRF:" + strloc.substr(start, strloc.length()-start);
			}
			Tango::DbDatum	cvs_loc("cvs_location");
			cvs_loc << strloc;
			data.push_back(cvs_loc);
		}
	}

	//	Get CVS tag revision
	string	tagname(TagName);
	header = "$Name: ";
	start = header.length();
	string	endstr(" $");
	end   = tagname.find(endstr);
	if (end!=string::npos && end>start)
	{
		string	strtag = tagname.substr(start, end-start);
		Tango::DbDatum	cvs_tag("cvs_tag");
		cvs_tag << strtag;
		data.push_back(cvs_tag);
	}

	//	Get URL location
	string	httpServ(HttpServer);
	if (httpServ.length()>0)
	{
		Tango::DbDatum	db_doc_url("doc_url");
		db_doc_url << httpServ;
		data.push_back(db_doc_url);
	}

	//  Put inheritance
	Tango::DbDatum	inher_datum("InheritedFrom");
	vector<string> inheritance;
	inheritance.push_back("Device_3Impl");
	inher_datum << inheritance;
	data.push_back(inher_datum);

	//	Call database and and values
	//--------------------------------------------
	get_db_class()->put_property(data);
}

}	// namespace
